plugins {
	id "java-library"
	id "org.springframework.boot.deployed"
	id "org.springframework.boot.optional-dependencies"
}

description = "Spring Boot Tomcat"

def tomcatConfigProperties = layout.buildDirectory.dir("tomcat-config-properties")

configurations {
	tomcatDistribution
}

dependencies {
	api(project(":spring-boot-project:spring-boot"))
	api("org.apache.tomcat.embed:tomcat-embed-core") {
		exclude group: "org.apache.tomcat", module: "tomcat-annotations-api"
	}

	optional("org.apache.tomcat.embed:tomcat-embed-jasper")
	optional("org.springframework:spring-webflux")

	runtimeOnly("jakarta.annotation:jakarta.annotation-api")

	testImplementation(project(":spring-boot-project:spring-boot-tools:spring-boot-test-support"))
	testImplementation(testFixtures(project(":spring-boot-project:spring-boot")))
	testImplementation("org.apache.httpcomponents.client5:httpclient5")

	testRuntimeOnly("ch.qos.logback:logback-classic")

	tomcatDistribution("org.apache.tomcat:tomcat:${tomcatVersion}@zip")
}

task extractTomcatConfigProperties(type: Sync) {
	destinationDir = file(tomcatConfigProperties)
	from {
		zipTree(configurations.tomcatDistribution.incoming.files.singleFile).matching {
			include '**/conf/catalina.properties'
		}.singleFile
	}
}

sourceSets {
	test {
		output.dir(tomcatConfigProperties, builtBy: "extractTomcatConfigProperties")
	}
}

test {
	jvmArgs += "--add-opens=java.base/java.net=ALL-UNNAMED"
}
